#!/bin/bash
#   Copyright 2014 Commonwealth Bank of Australia
#
#   Licensed under the Apache License, Version 2.0 (the "License");
#   you may not use this file except in compliance with the License.
#   You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
#   Unless required by applicable law or agreed to in writing, software
#   distributed under the License is distributed on an "AS IS" BASIS,
#   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
#   See the License for the specific language governing permissions and
#   limitations under the License.

# Library functions for CI

set -o nounset

# Library import helper
function import() {
    IMPORT_PATH="${BASH_SOURCE%/*}"
    if [[ ! -d "$IMPORT_PATH" ]]; then IMPORT_PATH="$PWD"; fi
    . $IMPORT_PATH/$1
    [ $? != 0 ] && echo "$1 import error" 1>&2 && exit 1
}

import common

# Determine the current CI environment
function CI_Env_Get() {
    if [ "${TRAVIS:-}" = "true" ]; then
        CI_SYSTEM=TRAVIS
    elif [ "${DRONE:-}" = "true" ]; then
        CI_SYSTEM=DRONE
    else
        CI_SYSTEM=NONE
    fi
    echo $CI_SYSTEM
}

# Export CI environment to the common format
function CI_Env_Adapt() {
    local CI_SYSTEM=$1

    case $CI_SYSTEM in
    TRAVIS)
        CI_NAME=travis
        CI_REPO=$TRAVIS_REPO_SLUG
        CI_BRANCH=$TRAVIS_BRANCH
        CI_COMMIT=$TRAVIS_COMMIT
        CI_BUILD_NUMBER=$TRAVIS_BUILD_NUMBER
        CI_PULL_REQUEST=$TRAVIS_PULL_REQUEST
        CI_JOB_NUMBER=$TRAVIS_JOB_NUMBER
        CI_BUILD_DIR=$TRAVIS_BUILD_DIR
        CI_BUILD_URL="https://travis-ci.org/$TRAVIS_REPO_SLUG/builds/$TRAVIS_BUILD_ID"
        CI_TAG=$TRAVIS_TAG
        ;;
    DRONE)
        CI_NAME=drone
        CI_REPO=$DRONE_REPO
        CI_BRANCH=$DRONE_BRANCH
        CI_COMMIT=$DRONE_COMMIT
        CI_BUILD_NUMBER=$DRONE_BUILD_NUMBER
        CI_PULL_REQUEST=$DRONE_PULL_REQUEST
        CI_JOB_NUMBER=$DRONE_JOB_NUMBER
        CI_BUILD_DIR=$DRONE_BUILD_DIR
        CI_BUILD_URL=$DRONE_BUILD_URL
        CI_TAG=$DRONE_TAG
        ;;
    NONE)
        CI_NAME=none
        repo=$( basename $(git remote -v | grep -e "^origin\t.*fetch.$" | sed 's/^origin\(.*\) (fetch)/\1/') .git )
        parentUrl=$( dirname $(git remote -v | grep -e "^origin\t.*fetch.$" | sed 's/^origin\(.*\) (fetch)/\1/') )
        owner=$( basename ${parentUrl} )

        CI_REPO=${owner}/${repo}
        CI_BRANCH=$( git rev-parse --abbrev-ref HEAD )
        CI_COMMIT=$( git rev-parse HEAD )
        CI_BUILD_NUMBER=B$$
        CI_PULL_REQUEST=
        CI_JOB_NUMBER=J$$
        CI_BUILD_DIR=$PWD
        CI_BUILD_URL=
        CI_TAG=$( git describe --tags --abbrev=0 2> /dev/null || echo "" )
        ;;
    *)
        log "CI system could not be identified (${CI_NAME:-})" 1>&2
        exit 1
        ;;
    esac
}


# Dump the CI environment to stdout
function CI_Env_Dump() {
    CI_Env_Adapt $(CI_Env_Get)
    echo $CI_NAME
cat <<DUMP 
    CI_NAME=$CI_NAME
    CI_REPO=$CI_REPO
    CI_BRANCH=$CI_BRANCH
    CI_COMMIT=$CI_COMMIT
    CI_BUILD_NUMBER=$CI_BUILD_NUMBER
    CI_PULL_REQUEST=$CI_PULL_REQUEST
    CI_JOB_NUMBER=$CI_JOB_NUMBER
    CI_BUILD_DIR=$CI_BUILD_DIR
    CI_BUILD_URL=$CI_BUILD_URL
    CI_TAG=$CI_TAG
DUMP
}

# Get a version number based on the Omnia standard:
# major.minor.path-commish-timestamp for master branch
# major.minor.path-commish-timestamp-PRNN for pull request NN
# major.minor.path-commish-timestamp-branchname for branch branchname.
# Expects the source version number to be input.
function Version_Get() {
    CI_Env_Adapt $(CI_Env_Get)

    local source_version=$(echo "$1" | grep -E -o "[0-9]+\.[0-9]+\.[0-9]+")
    if [ -z $source_version ]; then
        echo "Bad semantic version number. Version contents: $1" 1>&2
        exit 1
    fi

    local branch=$CI_BRANCH
    local ts=$(date "+%Y%m%d%H%M%S")
    local commitish=${CI_COMMIT:0:7}
    local version="$source_version-$ts-$commitish"
    
    if [ "$CI_PULL_REQUEST" != "false" ] && [ ! -z $CI_PULL_REQUEST ]; then
        echo "$version-PR$CI_PULL_REQUEST"
    elif [ $CI_BRANCH == "master" ]; then
        echo "$version"
    else
        echo "$version-$branch"
    fi
}

# Checks if we are on a release branch.
# Returns 0 iff we are on a release branch and 1 otherwise.
# Master is a release branch by default.
function Is_Release() {
    CI_Env_Adapt $(CI_Env_Get)

    if [ $CI_BRANCH == "master" ]; then
      echo 0
    elif [[ $CI_PULL_REQUEST == false && $(Array_Contains "$CI_BRANCH" "${RELEASE_BRANCHES[@]}") == 0 ]]; then
        echo 0
    else
        echo 1
    fi
}

# Check if a given input (argument 1) is in the list of arguments passed that
# succeed it. Example usage: Array_Contains "needle" "${HAYSTACK[@]}"
# Returns 0 if the value is found, 1 if not.
Array_Contains () {
    local seeking="$1"; shift
    local in=1
    for element; do
        if [[ "$element" == "$seeking" ]]; then
            in=0
            break
        fi
    done
    echo $in
}

set +o nounset
