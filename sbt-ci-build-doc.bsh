#!/bin/bash
#   Copyright 2016 Commonwealth Bank of Australia
#
#   Licensed under the Apache License, Version 2.0 (the "License");
#   you may not use this file except in compliance with the License.
#   You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
#   Unless required by applicable law or agreed to in writing, software
#   distributed under the License is distributed on an "AS IS" BASIS,
#   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
#   See the License for the specific language governing permissions and
#   limitations under the License.
#
#   Usage:
#   ./ci/sbt-ci-build-doc <documentation root URL> \
#       <documentation source code URL template>
#
#   Example:
#   ./ci/sbt-ci-build-doc https://commbank.github.io/maestro/latest/api \
#       https://github.com/CommBank/maestro/{}/tree/â‚¬{FILE_PATH}.scala \
#
#   Important:
#   The second parameter is a template string which is fed into unidoc to build
#   documentation. If you don't know what this is, then just copy the above
#   example and change the project name for your project.
#
#   How it works:
#   Notice in do_build_doc we play some games with the GIT_WORK_TREE. This is
#   is done so we can checkout the gh_pages branch to a subdirectory, and update
#   it without needing to pull it remotely.

set -u

# Library import helper
function import() {
    IMPORT_PATH="${BASH_SOURCE%/*}"
    if [[ ! -d "$IMPORT_PATH" ]]; then IMPORT_PATH="$PWD"; fi
    . $IMPORT_PATH/$1
    [ $? != 0 ] && echo "$1 import error" 1>&2 && exit 1
}

import lib-ci

CI_Env_Adapt $(CI_Env_Get)

# Document URL root
docUrlRoot="$1"
[ -z "$docUrlRoot" ] && echoerr "Must specify a document URL root!" && exit 1

# Document Source URL Template
docSourceUrlTemplate="$2"
[ -z "$docSourceUrlTemplate" ] && echoerr "Must specify a document source template!" && exit 1

version=$(Version_Get "$(cat version.sbt)")
if [ -z $version ]; then
    exit 1
fi

if [ ! -e src/site/_config.yml ]; then
    echo "src/site/_config.yml does not exist. Aborting."
    exit 1
fi

echo "" >> src/site/_config.yml
echo "releaseVersion: $version" >> src/site/_config.yml

# This command dumps the documentation into target/site
#echo "Creating site..."
#sbt -Dsbt.global.base=$CI_BUILD_DIR make-site

# Global name of the documentation branch
DOC_BRANCH=gh-pages

# Builds documentation.
function do_build_doc() {
    # Figure out what remote we're currently using
    GIT_REMOTE=$(git remote -v | cut -f2 | cut -d' ' -f1 | head -n1)
    if [ -z $GIT_REMOTE ]; then
        echoerr "No git remote could be identified. Aborting."
        exit 1
    fi

    # Don't mess up .git dir branch state in real work dir - store where we were
    # Only relevant for local testers.
    ORIG_BRANCH=$(git symbolic-ref HEAD)

    # What we do here is use the CI .git directory to checkout the gh-pages
    # branch, clear it out, and then generate the site pages directly into that.
    # It's important to reset GIT_DIR and GIT_WORK_TREE once we're done with it,
    # and to use absolute file paths.
    mkdir -p target/site
    export GIT_DIR=$(pwd)/.git
    export GIT_WORK_TREE=$(pwd)/target/site
    
    # Does gh-pages exist on the remote?
    if ! git show-ref refs/remotes/$GIT_REMOTE/$DOC_BRANCH; then
        # Create an empty branch.
        echoerr "Warning: $DOC_BRANCH will be created (it did not exist on the remote)"
    else
        # Track the existent branch
        git branch $DOC_BRANCH -f $GIT_REMOTE/$DOC_BRANCH
    fi
    
    git symbolic-ref HEAD refs/heads/$DOC_BRANCH
    
    # Read the tree into the index so the build result is auto-available
    git read-tree gh-pages

    echo "Creating documentation..."
    sbt -Dsbt.global.base=$CI_BUILD_DIR \
        "set uniform.docRootUrl := \"$docUrlRoot\"" \
        "set uniform.docSourceUrl := \"$docSourceUrlTemplate\"" \
        make-site
    if [ $? != 0 ]; then
        echoerr "Error building documentation"
        exit 1
    fi
    
    git add -A
    git commit -m "CI automatic documentation ($CI_BUILD_URL)"
    # Switch back to the previous head for local users
    git symbolic-ref HEAD $ORIG_BRANCH

    # Avoid breaking the rest of the builds.
    unset GIT_DIR
    unset GIT_WORK_TREE
}

# Publishes built documentation
function do_publish() {
    echo "Pushing new documentation to the $DOC_BRANCH branch..."
    
    git push --quiet origin $DOC_BRANCH:$DOC_BRANCH
    if [ $? != 0 ]; then
        echoerr "Error pushing $DOC_BRANCH."
        exit 1
    fi
}

if [ $CI_BRANCH = "master" ]; then
    do_build_doc
    do_publish  
else
    if [ ! -z $FORCE_DOCS ]; then
        echoerr "Documentation is being force built, but will not be published."
        do_build_doc  
    fi
    echoerr "This is not the master branch so documentation is not being published."
fi
